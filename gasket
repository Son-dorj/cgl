// SierpinskiGasket3d1.cpp : Defines the entry point for the console application.
//


#include "stdafx.h"
#include<stdio.h>
#include<glut.h>

int n;
float v[4][3] = {{0.0,0.0,1.0},{0.0,0.942809,-0.33333},{-0.816497,-0.471405,-0.333333} , {0.816497,-0.471405,-0.333333}};

void triangle(float *v1, float *v2, float *v3)
{
	glBegin(GL_TRIANGLES);
	glVertex2fv(v1);
	glVertex2fv(v2);
	glVertex2fv(v3);
	glEnd();
}

void divide_triangle(float *v1, float *v2, float *v3, int n)
{
	float m[3][2];
	int i;
	if(n>0)
	{
		for(i=0;i<2;i++)
		{
			m[0][i] = (v1[i] + v2[i])/2;
			m[1][i] = (v2[i] + v3[i])/2;
			m[2][i] = (v3[i] + v1[i])/2;
		}
		divide_triangle(v1,m[0],m[2],n-1);
		divide_triangle(m[0],v2,m[1],n-1);
		divide_triangle(m[2],m[1],v3,n-1);
	}
	else
		triangle(v1,v2,v3);
}

void divide_tetra(float *v1, float *v2, float *v3, float *v4,int n)
{
	glColor3f(1,1,0);
	divide_triangle(v1,v2,v3,n);
	glColor3f(1,0,0);
	divide_triangle(v1,v2,v4,n);
	glColor3f(0,0,1);
	divide_triangle(v1,v4,v3,n);
	glColor3f(0,1,0);
	divide_triangle(v4,v2,v3,n);
	
	
	
}


void init()
{
	glClearColor(0.0,0.0,0.0,0.0);
	glOrtho(-1.0,1.0,-1.0,1.0,-1.0,1.0);
	glEnable(GL_DEPTH_TEST);
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	divide_tetra(v[0],v[1],v[2],v[3],n);
	glFlush();
}

void main()
{
	printf("Enter the No of Division\n");
	scanf_s("%d", &n);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_DEPTH);
	glutInitWindowSize(700,700);
	glutCreateWindow("Sierpinski Gasket 3D");
	init();
	glutDisplayFunc(display);
	glutMainLoop();
}

